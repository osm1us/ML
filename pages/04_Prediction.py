import streamlit as st
import pandas as pd
import numpy as np
import os
import joblib
import xgboost as xgb
import lightgbm as lgb
from catboost import CatBoostRegressor
from tensorflow.keras.models import load_model as load_keras_model

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞", layout="centered")
st.title("üíé –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞")

st.markdown("""
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä—É—á–Ω—É—é.
""")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MODELS_DIR = "models"

# –û–ø–∏—Å–∞–Ω–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
FEATURES = {
    'carat': {
        'description': '–í–µ—Å –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞ (–∫–∞—Ä–∞—Ç)',
        'min': 0.2,
        'max': 5.01,
        'step': 0.01
    },
    'cut': {
        'description': '–ö–∞—á–µ—Å—Ç–≤–æ –æ–≥—Ä–∞–Ω–∫–∏',
        'options': {
            'Fair': 0,
            'Good': 1,
            'Very Good': 2,
            'Premium': 3,
            'Ideal': 4
        }
    },
    'color': {
        'description': '–¶–≤–µ—Ç (–æ—Ç J –¥–æ D)',
        'options': {
            'J': 0, 'I': 1, 'H': 2, 'G': 3, 'F': 4, 'E': 5, 'D': 6
        }
    },
    'clarity': {
        'description': '–ß–∏—Å—Ç–æ—Ç–∞',
        'options': {
            'I1': 0, 'SI2': 1, 'SI1': 2, 'VS2': 3, 'VS1': 4, 'VVS2': 5, 'VVS1': 6, 'IF': 7
        }
    },
    'depth': {
        'description': '–ì–ª—É–±–∏–Ω–∞ (%)',
        'min': 43, 'max': 79, 'step': 0.1
    },
    'table': {
        'description': '–®–∏—Ä–∏–Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏ (–º–º)',
        'min': 43, 'max': 95, 'step': 0.1
    },
    'x': {
        'description': '–î–ª–∏–Ω–∞ (–º–º)',
        'min': 3.73, 'max': 10.74, 'step': 0.1
    },
    'y': {
        'description': '–®–∏—Ä–∏–Ω–∞ (–º–º)',
        'min': 3.68, 'max': 58.9, 'step': 0.1
    },
    'z': {
        'description': '–í—ã—Å–æ—Ç–∞ (–º–º)',
        'min': 1.07, 'max': 31.8, 'step': 0.1
    }
}

def load_model(model_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    if model_path.endswith('.pkl'):
        return joblib.load(model_path)
    elif model_path.endswith('.h5'):
        return load_keras_model(model_path)
    elif model_path.endswith('.json'):
        if 'xgb' in model_path.lower():
            model = xgb.XGBRegressor()
            model.load_model(model_path)
            return model
        elif 'lgb' in model_path.lower():
            return lgb.Booster(model_file=model_path)
    elif model_path.endswith('.cbm'):
        return CatBoostRegressor().load_model(model_path)
    raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª–∏: {model_path}")

def preprocess_input(input_data):
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    if isinstance(input_data, dict):
        df = pd.DataFrame([input_data])
    else:
        df = input_data.copy()
    
    # –ü—Ä–∏–≤–æ–¥–∏–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É
    numeric_cols = ['carat', 'depth', 'table', 'x', 'y', 'z']
    for col in numeric_cols:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')
    
    return df

# –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
st.sidebar.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
uploaded_file = st.sidebar.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", 
    type=["csv"],
    help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: carat, cut, color, clarity, depth, table, x, y, z"
)

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
st.sidebar.header("–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
model_files = []
if os.path.exists(MODELS_DIR):
    model_files = [f for f in os.listdir(MODELS_DIR) 
                  if f.endswith(('.pkl', '.h5', '.json', '.cbm'))]

if not model_files:
    st.error(f"–í –ø–∞–ø–∫–µ {MODELS_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π")
    st.stop()

selected_model = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è",
    model_files,
    format_func=lambda x: x.split('.')[0].replace('_', ' ').title()
)

# –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
st.header("–í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞")
input_data = {}
col1, col2 = st.columns(2)

with col1:
    input_data['carat'] = st.number_input(
        FEATURES['carat']['description'],
        min_value=float(FEATURES['carat']['min']),
        max_value=float(FEATURES['carat']['max']),
        value=0.7,
        step=float(FEATURES['carat']['step']),
        help="–í–µ—Å –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞ –≤ –∫–∞—Ä–∞—Ç–∞—Ö"
    )
    
    input_data['cut'] = st.selectbox(
        FEATURES['cut']['description'],
        options=list(FEATURES['cut']['options'].keys()),
        index=3
    )
    
    input_data['color'] = st.selectbox(
        FEATURES['color']['description'],
        options=list(FEATURES['color']['options'].keys()),
        index=3
    )

with col2:
    input_data['clarity'] = st.selectbox(
        FEATURES['clarity']['description'],
        options=list(FEATURES['clarity']['options'].keys()),
        index=3
    )
    
    input_data['depth'] = st.number_input(
        FEATURES['depth']['description'],
        min_value=float(FEATURES['depth']['min']),
        max_value=float(FEATURES['depth']['max']),
        value=61.5,
        step=float(FEATURES['depth']['step'])
    )
    
    input_data['table'] = st.number_input(
        FEATURES['table']['description'],
        min_value=float(FEATURES['table']['min']),
        max_value=float(FEATURES['table']['max']),
        value=57.0,
        step=float(FEATURES['table']['step'])
    )

# –†–∞–∑–º–µ—Ä—ã –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞
st.subheader("–†–∞–∑–º–µ—Ä—ã –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞ (–º–º)")
dim_col1, dim_col2, dim_col3 = st.columns(3)

with dim_col1:
    input_data['x'] = st.number_input(
        FEATURES['x']['description'],
        min_value=float(FEATURES['x']['min']),
        max_value=float(FEATURES['x']['max']),
        value=5.7,
        step=float(FEATURES['x']['step'])
    )

with dim_col2:
    input_data['y'] = st.number_input(
        FEATURES['y']['description'],
        min_value=float(FEATURES['y']['min']),
        max_value=float(FEATURES['y']['max']),
        value=5.7,
        step=float(FEATURES['y']['step'])
    )

with dim_col3:
    input_data['z'] = st.number_input(
        FEATURES['z']['description'],
        min_value=float(FEATURES['z']['min']),
        max_value=float(FEATURES['z']['max']),
        value=3.5,
        step=float(FEATURES['z']['step'])
    )

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
predict_btn = st.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary")

if predict_btn or uploaded_file is not None:
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        model_path = os.path.join(MODELS_DIR, selected_model)
        model = load_model(model_path)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if uploaded_file is not None:
            df = pd.read_csv(uploaded_file)
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª —Å {len(df)} –∑–∞–ø–∏—Å—è–º–∏")
            st.dataframe(df.head())
        else:
            df = preprocess_input(input_data)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        df = df.copy()
        df['cut'] = df['cut'].map(FEATURES['cut']['options'])
        df['color'] = df['color'].map(FEATURES['color']['options'])
        df['clarity'] = df['clarity'].map(FEATURES['clarity']['options'])
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        predictions = model.predict(df)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        if len(predictions) == 1:
            st.metric(
                label="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞",
                value=f"${predictions[0]:,.2f}",
                help="–¶–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê"
            )
        else:
            results = pd.DataFrame({
                'carat': df['carat'],
                'cut': df['cut'].map({v: k for k, v in FEATURES['cut']['options'].items()}),
                'color': df['color'].map({v: k for k, v in FEATURES['color']['options'].items()}),
                'clarity': df['clarity'].map({v: k for k, v in FEATURES['clarity']['options'].items()}),
                'predicted_price': predictions
            })
            
            st.dataframe(
                results.style.format({
                    'predicted_price': '${:,.2f}',
                    'carat': '{:.2f}'
                }),
                use_container_width=True
            )
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            csv = results.to_csv(index=False).encode('utf-8')
            st.download_button(
                "–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                csv,
                "diamond_predictions.csv",
                "text/csv",
                key='download-csv'
            )
    
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")