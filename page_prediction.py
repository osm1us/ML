import streamlit as st
import pandas as pd
import joblib
import tensorflow as tf
import os

if 'model' not in st.session_state:
    st.session_state.model = None
if 'preprocessor' not in st.session_state:
    st.session_state.preprocessor = None

MODEL_FILES = {
    "–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å (MLP)": "mlp.h5",
    "XGBoost": "xgboost.pkl",
    "CatBoost": "catboost.pkl",
    "LightGBM": "lightgbm.pkl",
    "Bagging Regressor": "baggingregressor.pkl",
    "Polynomial Regression": "polinomialreg.pkl"
}

@st.cache_resource
def load_preprocessor():
    preprocessor_path = os.path.join('models', 'mlp_preprocessor.pkl')
    loaded_preprocessor = None
    if os.path.exists(preprocessor_path):
        try:
            loaded_preprocessor = joblib.load(preprocessor_path)
            st.sidebar.success("–ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (mlp_preprocessor.pkl) —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        except Exception as e:
            st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {str(e)}")
    else:
        st.sidebar.error(f"–§–∞–π–ª –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {preprocessor_path}")
    return loaded_preprocessor

@st.cache_resource
def load_selected_model(model_filename):
    model_path = os.path.join('models', model_filename)
    loaded_model = None
    if os.path.exists(model_path):
        try:
            if model_filename.endswith('.h5'):
                loaded_model = tf.keras.models.load_model(model_path)
                st.sidebar.info(f"–ú–æ–¥–µ–ª—å Keras ({model_filename}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            elif model_filename.endswith('.pkl'):
                loaded_model = joblib.load(model_path)
                st.sidebar.info(f"–ú–æ–¥–µ–ª—å ({model_filename}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            else:
                st.sidebar.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏: {model_filename}")
        except Exception as e:
            st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {model_filename}: {str(e)}")
    else:
        st.sidebar.error(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")
    return loaded_model

def show_page():
    st.title("üíé –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞")

    preprocessor = load_preprocessor()
    if preprocessor is None:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
        return
    st.session_state.preprocessor = preprocessor

    selected_model_name = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:",
    options=list(MODEL_FILES.keys()),
    key="model_selector"
    )

    selected_model_filename = MODEL_FILES[selected_model_name]

    model_session_key = f"model_{selected_model_filename}"

    if model_session_key not in st.session_state or st.session_state[model_session_key] is None:
        with st.spinner(f'–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ "{selected_model_name}"...'):
            st.session_state[model_session_key] = load_selected_model(selected_model_filename)
    
    model = st.session_state[model_session_key]

    if model is None:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å '{selected_model_name}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
        return
    st.sidebar.success(f"–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {selected_model_name}")

    expected_columns_order = ['carat', 'cut', 'color', 'clarity', 'depth', 'table', 'x', 'y', 'z']

    with st.form("prediction_form"):
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            carat = st.number_input("–í–µ—Å (–∫–∞—Ä–∞—Ç)", min_value=0.1, max_value=10.0, value=0.7, step=0.1, key="carat_input")
            cut = st.selectbox("–ö–∞—á–µ—Å—Ç–≤–æ –æ–≥—Ä–∞–Ω–∫–∏", ["Ideal", "Premium", "Very Good", "Good", "Fair"], index=0, key="cut_input")
            color = st.selectbox("–¶–≤–µ—Ç (–æ—Ç D –¥–æ J)", ["D", "E", "F", "G", "H", "I", "J"], index=3, key="color_input")
            
        with col2:
            clarity = st.selectbox("–ß–∏—Å—Ç–æ—Ç–∞", ["IF", "VVS1", "VVS2", "VS1", "VS2", "SI1", "SI2", "I1"], index=3, key="clarity_input")
            depth = st.number_input("–ì–ª—É–±–∏–Ω–∞ (%)", min_value=43.0, max_value=79.0, value=61.5, step=0.1, key="depth_input")
            table = st.number_input("–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å—Ç–æ–ª–∞ (%)", min_value=43.0, max_value=95.0, value=57.0, step=0.1, key="table_input")
        
        x = st.number_input("–î–ª–∏–Ω–∞ (–º–º)", min_value=0.0, value=5.7, step=0.1, key="x_input")
        y = st.number_input("–®–∏—Ä–∏–Ω–∞ (–º–º)", min_value=0.0, value=5.7, step=0.1, key="y_input")
        z = st.number_input("–í—ã—Å–æ—Ç–∞ (–º–º)", min_value=0.0, value=3.5, step=0.1, key="z_input")
        
        submitted = st.form_submit_button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É")
        
        if submitted:
            try:
                input_data_dict = {
                    'carat': carat,
                    'cut': cut,
                    'color': color,
                    'clarity': clarity,
                    'depth': depth,
                    'table': table,
                    'x': x,
                    'y': y,
                    'z': z
                }
                input_df = pd.DataFrame([input_data_dict])
                
                processed_input = preprocessor.transform(input_df)
                
                prediction_array = model.predict(processed_input)
                if prediction_array.ndim == 2 and prediction_array.shape[0] == 1 and prediction_array.shape[1] == 1:
                    prediction_scalar = float(prediction_array[0, 0])
                elif prediction_array.ndim == 1 and prediction_array.shape[0] == 1:
                    prediction_scalar = float(prediction_array[0])
                else:
                    st.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –º–∞—Å—Å–∏–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {prediction_array.shape}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç.")
                    prediction_scalar = float(prediction_array.flatten()[0]) 

                st.success(f"### –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${prediction_scalar:,.2f}")
                
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {str(e)}")
                st.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –º–æ–¥–µ–ª—å/–ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    
    st.markdown("---")
    st.subheader("–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type=["csv"], key="csv_uploader")
    
    if uploaded_file is not None:
        try:
            df_upload = pd.read_csv(uploaded_file)
            st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
            st.dataframe(df_upload.head())
            
            missing_cols = [col for col in expected_columns_order if col not in df_upload.columns]
            if missing_cols:
                st.warning(f"–í –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
            else:
                if st.button("–°–¥–µ–ª–∞—Ç—å –ø–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", key="batch_predict_button"):
                    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ..."):
                        processed_df = preprocessor.transform(df_upload[expected_columns_order])
                        
                        predictions = model.predict(processed_df)
                        
                        result_df = df_upload.copy()
                        result_df['predicted_price'] = predictions.flatten()
                        
                        st.success("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
                        st.dataframe(result_df)
                        
                        csv_output = result_df.to_csv(index=False).encode('utf-8')
                        st.download_button(
                            "–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (.csv)",
                            data=csv_output,
                            file_name="diamond_batch_predictions.csv",
                            mime="text/csv",
                            key="download_csv_button"
                        )
                        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–∞–π–ª–∞: {str(e)}")
